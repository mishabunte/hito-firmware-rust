import { VerticalBox, HorizontalBox } from "std-widgets.slint";
import "../../res/fonts/RobotoMono.ttf";
import { BrightnessLogo} from "BrightnessController.slint";
import { BatteryLevel, BatteryController } from "Battery.slint";
import { Palette } from "Palette.slint";
import { Router, ScreenEnum } from "Router.slint";
import { BaseButton } from "BaseButton.slint";

component HeaderBar {
    in-out property<string> header-title: "";
    in property<bool> brightness-scale-shown: false;
    if header-title != "": Rectangle {
        y: 10px;
        background: Palette.green;
        width: 1.1*header.width;
        height: 1.1*header.height;
        visible: !parent.brightness-scale-shown;
        header := Text {
            y: 1px;
            text: header-title;
            font-size: 20px;
            font-family: "Roboto Mono";
            font-italic: false;
            font-weight: 1000;
            horizontal-alignment: center;
            wrap: word-wrap;
        }
    }
}

component BackButton inherits BaseButton {
    content: "<";
    border-shown: false;
    clicked() => {
        Router.back();
    }
}

export component HitoWindow inherits Window {
    width: 320px;
    height: 240px;
    background: white;

    default-font-family: "Roboto Mono";

    // Screen corners
    // Top left 
    Rectangle {
        x: 0px;
        y: 0px;
        width: 2px;
        height: 2px;
        background: Palette.black;
    }
    Rectangle {
        x: 2px;
        y: 0px;
        width: 2px;
        height: 1px;
        background: Palette.black;
    }
    Rectangle {
        x: 0px;
        y: 2px;
        width: 1px;
        height: 2px;
        background: Palette.black;
    }
    // Top right
    Rectangle {
        x: 318px;
        y: 0px;
        width: 2px;
        height: 2px;
        background: Palette.black;
    }
    Rectangle {
        x: 316px;
        y: 0px;
        width: 2px;
        height: 1px;
        background: Palette.black;
    }
    Rectangle {
        x: 319px;
        y: 2px;
        width: 1px;
        height: 2px;
        background: Palette.black;
    }
    // Bottom right
    Rectangle {
        x: 318px;
        y: 238px;
        width: 2px;
        height: 2px;
        background: Palette.black;
    }
    Rectangle {
        x: 316px;
        y: 239px;
        width: 2px;
        height: 1px;
        background: Palette.black;
    }
    Rectangle {
        x: 319px;
        y: 236px;
        width: 1px;
        height: 2px;
        background: Palette.black;
    }
    // Bottom right
    Rectangle {
        x: 0px;
        y: 238px;
        width: 2px;
        height: 2px;
        background: Palette.black;
    }
    Rectangle {
        x: 0px;
        y: 239px;
        width: 2px;
        height: 1px;
        background: Palette.black;
    }
    Rectangle {
        x: 0px;
        y: 236px;
        width: 1px;
        height: 2px;
        background: Palette.black;
    }
    // Properties that can be overridden by child components
    in property <bool> show-brightness: true;
    in property <bool> is-lockscreen: false;
    in-out property <string> header-title: "";
    in-out property <bool> back-shown: true;

    // Internal brightness control state
    out property <bool> brightness-scale-shown: false;
    HeaderBar {
        y: 0px;
        header-title: header-title;
        brightness-scale-shown: root.brightness-scale-shown;
    }

    HorizontalLayout {
        width: parent.width;
        alignment: start;
        VerticalLayout {
            alignment: start;
            BackButton {
                button-width: 40px;
                button-height: 40px;
                x: 10px;
                in-font-size: 30px;
                visible: back-shown;
            }
        }
    }

    // Layout container for positioning elements
    HorizontalLayout {
        width: parent.width;
        spacing: 7px;
        padding-right: 9px;
        padding-top: 5px;
        alignment: end;
        // Brightness control in top-right corner
        brightness-control := BrightnessLogo {
          width: 20px;
          height: 20px;
          scale-x: -(parent.width / 2 - self.width / 2 - parent.padding-right - parent.spacing - 20px);
          scale-y: is-lockscreen ? 175px : 0px;
          visible: show-brightness;
          scale-shown-cb(shown) => {
              brightness-scale-shown = shown;
              root.brightness-scale-shown-changed(shown);
          }
        }
      
        Rectangle {
          width: 20px;
          height: 20px;
          battery-indicator := BatteryLevel {
            visible: show-brightness;
        }
      }
    }

    // Global touch area to hide brightness scale when clicking outside - only active when scale is shown
    if brightness-scale-shown: TouchArea {
        width: parent.width;
        height: parent.height;
        z: -1; // Above other elements to capture all clicks

        pointer-event(event) => {
            if (event.kind == PointerEventKind.down) {
                // Check if click is outside brightness control area
                if (self.mouse-x < brightness-control.x - 10px ||
                    self.mouse-x > brightness-control.x + brightness-control.width + 200px ||
                    self.mouse-y < brightness-control.y - 10px ||
                    self.mouse-y > brightness-control.y + brightness-control.height + 10px) {
                    brightness-control.scale-shown = false;
                    brightness-scale-shown = false;
                    root.brightness-scale-shown-changed(false);
                }
            }
        }
    }

    callback brightness-scale-shown-changed(bool);
    callback battery-level-requested() -> int;
}