import { HitoWindow } from "HitoWindow.slint";
import { Router, ScreenEnum } from "Router.slint";
import { Palette } from "Palette.slint";
import { BaseButton } from "BaseButton.slint";

component PassChar inherits BaseButton {
    button-width: 50px;
    button-height: 50px;
}

component PinGrid {
    property <length> spacing: 50px;
    VerticalLayout {
        y: 55px;
        spacing: 40px;
        alignment: center;
        HorizontalLayout {
            spacing: spacing;
            PassChar {content: "1";
                clicked() => {
                    number-clicked(1);
                }
            }
            PassChar {content: "2";
                clicked() => {
                    number-clicked(2);
                }
            }
            PassChar {content: "3";
                clicked() => {
                    number-clicked(3);
                }
            }
            PassChar {content: "4";
                clicked() => {
                    number-clicked(4);
                }
            }
            PassChar {content: "5";
                clicked() => {
                    number-clicked(5);
                }
            }     
        }
        HorizontalLayout {
            spacing: spacing;
            PassChar {content: "6";
                clicked() => {
                    number-clicked(6);
                }
            }
            PassChar {content: "7";
                clicked() => {
                    number-clicked(7);
                }
            }
            PassChar {content: "8";
                clicked() => {
                    number-clicked(8);
                }
            }
            PassChar {content: "9";
                clicked() => {
                    number-clicked(9);
                }
            }
            PassChar {content: "0";
                clicked() => {
                    number-clicked(0);
                }
            }
        }
    }
    callback number-clicked(int);
}

component EraseButton {
    property <bool> pressed: false;
    in-out property <string> content: "X";
    callback clicked();
    Text {
        text: content;
        width: 30px;
        height: 30px;
        font-size: 20px;
        color: pressed ? #d3d3d3 : red;
        horizontal-alignment: center;
        vertical-alignment: center;
        TouchArea {
        width: parent.width;
        height: parent.height;
        pointer-event(event) => {
                if (event.kind == PointerEventKind.down) {
                    pressed = true;
                } else if (event.kind == PointerEventKind.up) {
                    pressed = false;
                    root.clicked();
                    debug("Clicked erase", content);
                }
            }
        }
    }
}

component EnteredPassword {
    in-out property <int> password-count: 0;

    // Center the password display on the screen
    Rectangle {
        width: 320px;
        height: 30px;
        x: 0px;
        y: 0px;
        

        // Display rectangles with proper spacing like C firmware
        Text {
            text: {
                password-count == 0 ? "" :
                password-count == 1 ? "●" :
                password-count == 2 ? "●●" :
                password-count == 3 ? "●●●" :
                password-count == 4 ? "●●●●" :
                password-count == 5 ? "●●●●●" :
                password-count == 6 ? "●●●●●●" : "ERROR";
            }
            letter-spacing: 5px;
            font-size: 30px;
            y: - 6px;
            color: Palette.black;
            horizontal-alignment: center;
            vertical-alignment: center;
            width: parent.width;
            height: parent.height;
        }
        // Show underline when empty like C firmware
        Rectangle {
            width: 100px;
            height: 3px;
            x: (parent.width - self.width) / 2;
            y: parent.height - 5px;
            background: Palette.black;
            visible: false; // Disabled for now
        }
    }
}

export component EnterPinScreen inherits HitoWindow {
    property <length> line-y: 65px;
    in-out property <int> entered-password-count: 0;
    back-shown: false;
    Rectangle {
        y: 10px;
        background: Palette.green;
        width: 180px;
        height: 30px;
        visible: !parent.brightness-scale-shown;
        Text {
            y: 1px;
            text: "ENTER PASSCODE";
            font-size: 20px;
            font-italic: false;
            font-weight: 1000;
            horizontal-alignment: center;
            wrap: word-wrap;
            width: 260px;
        }
    }
    EraseButton {
        x: 280px;
        y: line-y;
        clicked() => {
            if (entered-password-count > 0) {
                entered-password-count = entered-password-count - 1;
                remove-char();
            }
        }
    }
    EnteredPassword {
        x: 0px;
        y: line-y;
        password-count: entered-password-count;
    }
    PinGrid {
        x: 30px;
        y: 70px;
        number-clicked(n) => {
            if (entered-password-count < 5) {
                entered-password-count = entered-password-count + 1;
                append-char(n);
            } else {
                Router.navigate(ScreenEnum.Home); // Go to home screen when full pin entered
            }
        }
    }
    callback append-char(int);
    callback remove-char();
}